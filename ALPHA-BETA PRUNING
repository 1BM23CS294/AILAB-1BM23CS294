import math

def alpha_beta(node, depth, alpha, beta, maximizingPlayer, values, index=0):
    # Terminal condition: leaf node or depth reached
    if depth == 0 or index >= len(values):
        return values[index]

    if maximizingPlayer:
        maxEval = -math.inf
        for i in range(2):  # two children per node
            val = alpha_beta(node*2 + i + 1, depth - 1, alpha, beta, False, values, index*2 + i)
            maxEval = max(maxEval, val)
            alpha = max(alpha, val)
            if beta <= alpha:
                print(f"Pruned at MAX node with α={alpha}, β={beta}")
                break
        return maxEval
    else:
        minEval = math.inf
        for i in range(2):
            val = alpha_beta(node*2 + i + 1, depth - 1, alpha, beta, True, values, index*2 + i)
            minEval = min(minEval, val)
            beta = min(beta, val)
            if beta <= alpha:
                print(f"Pruned at MIN node with α={alpha}, β={beta}")
                break
        return minEval


# Example game tree (depth = 3)
values = [3, 5, 6, 9, 1, 2, 0, -1]  # leaf node heuristic values

print("Alpha–Beta Pruning Process")
print("NAME: Samir Chaudhary")
print("USN: 1BM23CS294\n")

depth = 3
result = alpha_beta(0, depth, -math.inf, math.inf, True, values)

print("\nOptimal value:", result)
