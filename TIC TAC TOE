# Tic-Tac-Toe Simulation with Cost Calculation

def print_board(board):
    print("\n")
    for row in board:
        print(" | ".join(row))
        print("-" * 9)

def check_winner(board, player):
    for row in board:
        if all(s == player for s in row):
            return True
    for col in range(3):
        if all(board[row][col] == player for row in range(3)):
            return True
    if all(board[i][i] == player for i in range(3)) or all(board[i][2-i] == player for i in range(3)):
        return True
    return False

def tic_tac_toe_simulation(moves):
    print("Name: SAMIR CHAUDHARY")
    print("Roll No.: 1BM23CS294\n")
    
    board = [[" " for _ in range(3)] for _ in range(3)]
    players = ["X", "O"]
    print("Tic-Tac-Toe Simulation:")
    print_board(board)

    cost = 0
    for i, move in enumerate(moves):
        player = players[i % 2]
        row, col = move
        if board[row][col] == " ":
            board[row][col] = player
            cost += 10  # cost per move
            print(f"\nMove {i+1}: Player {player} -> ({row}, {col})")
            print_board(board)
            if check_winner(board, player):
                print(f"Player {player} wins!")
                print(f"Total Cost: {cost}")
                return
        else:
            print(f"Move {i+1}: Cell ({row},{col}) already occupied.")
    
    print("It's a tie!")
    print(f"Total Cost: {cost}")

# Pre-defined moves [(row, col), ...]
moves = [
    (0,0), (0,1),
    (1,1), (0,2),
    (2,2)
]

tic_tac_toe_simulation(moves)
