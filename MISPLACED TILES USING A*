import heapq

goal_state = [[1, 2, 3], [8, 0, 4], [7, 6, 5]]

class Node:
    def __init__(self, state, parent=None, g=0):
        self.state = state
        self.parent = parent
        self.g = g
        self.h = self.misplaced_tiles()
        self.f = self.g + self.h

    def misplaced_tiles(self):
        return sum(
            1
            for i in range(3)
            for j in range(3)
            if self.state[i][j] != 0 and self.state[i][j] != goal_state[i][j]
        )

    def __lt__(self, other):
        return self.f < other.f

def get_neighbors(state):
    neighbors = []
    x, y = next((i, j) for i in range(3) for j in range(3) if state[i][j] == 0)
    moves = [(-1, 0), (1, 0), (0, -1), (0, 1)]
    for dx, dy in moves:
        nx, ny = x + dx, y + dy
        if 0 <= nx < 3 and 0 <= ny < 3:
            new_state = [row[:] for row in state]
            new_state[x][y], new_state[nx][ny] = new_state[nx][ny], new_state[x][y]
            neighbors.append(new_state)
    return neighbors

def state_to_tuple(state):
    return tuple(tuple(row) for row in state)

def reconstruct_path(node):
    path = []
    while node:
        path.append(node.state)
        node = node.parent
    return path[::-1]

def a_star(start_state):
    start_node = Node(start_state)
    open_list = []
    heapq.heappush(open_list, start_node)
    closed_set = set()
    while open_list:
        current = heapq.heappop(open_list)
        if current.state == goal_state:
            return reconstruct_path(current), current.g
        closed_set.add(state_to_tuple(current.state))
        for neighbor in get_neighbors(current.state):
            if state_to_tuple(neighbor) in closed_set:
                continue
            neighbor_node = Node(neighbor, current, current.g + 1)
            heapq.heappush(open_list, neighbor_node)
    return None, -1

start_state = [[2, 8, 3], [1, 6, 4], [7, 0, 5]]
solution, cost = a_star(start_state)

if solution:
    print("Solution Path:")
    for step in solution:
        for row in step:
            print(row)
        print()
    print("Total Cost:", cost)
else:
    print("No solution found.")

print("USN: 1BM23CS294")
print("SAMIR CHAUDHARY")
