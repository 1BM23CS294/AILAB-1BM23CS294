import random
import math

def calculate_cost(board):
    conflicts = 0
    n = len(board)
    for i in range(n):
        for j in range(i+1, n):
            if board[i] == board[j] or abs(board[i] - board[j]) == abs(i - j):
                conflicts += 1
    return conflicts

def random_neighbor(board):
    n = len(board)
    neighbor = board[:]
    col = random.randint(0, n-1)
    new_row = random.randint(0, n-1)
    while new_row == neighbor[col]:
        new_row = random.randint(0, n-1)
    neighbor[col] = new_row
    return neighbor

def simulated_annealing(n, initial_temp=1000, cooling_rate=0.95, min_temp=0.01, max_iter=10000):
    current = [random.randint(0, n-1) for _ in range(n)]
    current_cost = calculate_cost(current)
    temp = initial_temp
    iteration = 0

    while temp > min_temp and iteration < max_iter and current_cost > 0:
        neighbor = random_neighbor(current)
        neighbor_cost = calculate_cost(neighbor)
        delta = neighbor_cost - current_cost

        if delta < 0 or random.random() < math.exp(-delta / temp):
            current = neighbor
            current_cost = neighbor_cost

        temp *= cooling_rate
        iteration += 1

    return current, current_cost

def print_board(board):
    n = len(board)
    for row in range(n):
        line = ""
        for col in range(n):
            line += "Q " if board[col] == row else ". "
        print(line)
    print()

print("Name: SAMIR CHAUDHARY")
print("USN: 1BM23CS294\n")

N = 8
solution, cost = simulated_annealing(N)

print(f"Final cost: {cost}")
if cost == 0:
    print("Solution found:")
    print_board(solution)
else:
    print("No perfect solution found, best found:")
    print_board(solution)
